(require 'cl)

(defun get-plugin-real-path (plugin) ""
  (let ((dirs '("E:/S/Dropbox/1/ep/"
                "D:/S/Dropbox/1/ep/"
                "~/R/pu/ep/"
                "~/S/pu/ep/")))
    (concat (car (remove-if-not 'file-exists-p dirs)) plugin)))

(setq backup-directory-alist
  `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
  `((".*" ,temporary-file-directory t)))

(setq default-major-mode 'lisp-mode)
(setq inhibit-startup-message t)

;; set default coding
(setq default-buffer-file-coding-system 'gbk)
;; file name coding
(setq file-name-coding-system 'gbk)
;; highest priority coding
(prefer-coding-system 'utf-8)

(setq default-frame-alist
  '((top . 20) (left . 200) (height . 25) (width . 100) (menu-bar-lines . 20) (tool-bar-lines . 0) (font . "Yahei Mono 14")))
  
(setq frame-title-format "%b @Emacs")

(add-to-list 'custom-theme-load-path (get-plugin-real-path "cyberpunk-theme.el"))
(add-to-list 'custom-theme-load-path (get-plugin-real-path "emacs-color-theme-solarized"))

(if (window-system)
  (load-theme 'solarized-dark t)
  (load-theme 'cyberpunk t))

(menu-bar-mode -1)
(if (window-system)
  ((tool-bar-mode -1)
   (scroll-bar-mode -1)))

(column-number-mode t)
(show-paren-mode t)
(setq show-paren-style 'parentheses)

(add-hook 'c-mode-common-hook
  (lambda ()
    (font-lock-add-keywords nil
      '(("\\<\\(FIXME\\|TODO\\|BUG\\):" 1 font-lock-warning-face t)))))

(add-to-list 'load-path (get-plugin-real-path "s.el"))
(add-to-list 'load-path (get-plugin-real-path "dash.el"))
(require 's)

(add-to-list 'load-path (get-plugin-real-path "clojure-mode"))
;; (add-to-list 'load-path (get-plugin-real-path "nrepl.el"))
(require 'clojure-mode)
;; (require 'nrepl)
;; (setq nrepl-port "4555")

(add-to-list 'load-path (get-plugin-real-path "lua-mode"))
(autoload 'lua-mode "lua-mode" "Lua editing mode." t)
(add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))
(add-to-list 'interpreter-mode-alist '("lua" . lua-mode))

(setq evil-symbol-word-search t)
(add-to-list 'load-path (get-plugin-real-path "evil"))
(require 'evil)
(evil-mode 1)

(add-to-list 'load-path (get-plugin-real-path "flx"))
(require 'flx-ido)
(ido-mode 1)
(ido-everywhere 1)
(flx-ido-mode 1)
;; disable ido faces to see flx highlights.
(setq ido-use-faces nil)

(add-to-list 'load-path (get-plugin-real-path "grizzl"))
(add-to-list 'load-path (get-plugin-real-path "fiplr"))
(require 'fiplr)
(fiplr-mode 1)
(setq fiplr-root-markers '(".git" ".svn"))
(setq fiplr-ignored-globs '((directories (".git" ".svn"))
                            (files ("*.jpg" "*.png" "*.zip" "*~"))))
(global-set-key (kbd "C-x f") 'fiplr-find-file)

(setq c-basic-offset 4)
(setq default-tab-width 4)

(require 'ansi-color)
(ansi-color-for-comint-mode-on)

(add-to-list 'load-path (get-plugin-real-path "visual-regexp.el"))
(add-to-list 'load-path (get-plugin-real-path "visual-regexp-steroids.el"))
(require 'visual-regexp-steroids)
(define-key global-map (kbd "C-c r") 'vr/replace)
(define-key global-map (kbd "C-c q") 'vr/query-replace)
;; to use visual-regexp's isearch instead of the built-in regexp isearch, also include the following lines:
(define-key esc-map (kbd "C-r") 'vr/isearch-backward) ;; C-M-r
(define-key esc-map (kbd "C-s") 'vr/isearch-forward) ;; C-M-s

(add-to-list 'load-path (get-plugin-real-path "evil-surround"))
(require 'evil-surround)
(global-evil-surround-mode 1)

(add-to-list 'load-path (get-plugin-real-path "tagshow"))
(require 'tagshow)
(require 'wscope)
(tagshow-mode 1)
(define-key global-map (kbd "C-s") 'show-tags)
(define-key global-map (kbd "C-x g") 'wscope-find-global-definition)
(define-key global-map (kbd "C-x s") 'wscope-find-this-symbol)
(define-key global-map (kbd "C-x t") 'wscope-find-this-text-string)

(add-to-list 'load-path (get-plugin-real-path "popwin-el"))
(require 'popwin)
(popwin-mode 1)
(setq display-buffer-function 'popwin:display-buffer)

(add-to-list 'load-path (get-plugin-real-path "yasnippet"))
(require 'yasnippet)
(setq yas-snippet-dirs
       (list (get-plugin-real-path "yas-snip")
        (get-plugin-real-path "yasnippet/snippets")
        ))
(yas-global-mode 1)

(setq popwin:special-display-config
  '(("*Help*"  :height 30)
    ("*Completions*" :noselect t)
    ("*Messages*" :noselect t :height 30)
    ("*Apropos*" :noselect t :height 30)
    ("*compilation*" :noselect t)
    ("*Backtrace*" :height 30)
    ("*Messages*" :height 30)
    ("*Occur*" :noselect t)
    ("*Ido Completions*" :noselect t :height 30)
    ("*magit-commit*" :noselect t :height 40 :width 80 :stick t)
    ("*magit-diff*" :noselect t :height 40 :width 80)
    ("*magit-edit-log*" :noselect t :height 15 :width 80)
    ("\\*ansi-term\\*.*" :regexp t :height 30)
    ("*shell*" :height 30)
    (".*overtone.log" :regexp t :height 30)
    ("*gists*" :height 30)
    ("*sldb.*":regexp t :height 30)
    ("*nrepl-error*" :height 30 :stick t)
    ("*nrepl-doc*" :height 30 :stick t)
    ("*nrepl-src*" :height 30 :stick t)
    ("*nrepl-result*" :height 30 :stick t)
    ("*nrepl-macroexpansion*" :height 30 :stick t)
    ("*Kill Ring*" :height 30)
    ("*Compile-Log*" :height 30 :stick t)
    ("*git-gutter:diff*" :height 30 :stick t)))

;; auto-complete config
;; (add-to-list 'load-path (get-plugin-real-path "auto-complete/lib/ert"))
(add-to-list 'load-path (get-plugin-real-path "fuzzy-el"))
(add-to-list 'load-path (get-plugin-real-path "popup-el"))
(add-to-list 'load-path (get-plugin-real-path "auto-complete"))
(require 'auto-complete)
(require 'auto-complete-config)
(ac-config-default)

(add-to-list 'ac-dictionary-directories (get-plugin-real-path "auto-complete/dict"))

(global-auto-complete-mode t)
(setq ac-auto-show-menu t)
(setq ac-dwim t)
(setq ac-use-menu-map t)
(setq ac-quick-help-delay 1)
(setq ac-quick-help-height 60)
(setq ac-disable-inline t)
(setq ac-show-menu-immediately-on-auto-complete t)
(setq ac-auto-start 2)
(setq ac-candidate-menu-min 0)

(set-default 'ac-sources
             '(ac-source-dictionary
               ac-source-words-in-buffer
               ac-source-words-in-same-mode-buffers
               ac-source-semantic
               ac-source-yasnippet))

(dolist (mode '(magit-log-edit-mode log-edit-mode org-mode text-mode haml-mode
                sass-mode yaml-mode csv-mode espresso-mode haskell-mode
                html-mode nxml-mode sh-mode smarty-mode clojure-mode
                lisp-mode textile-mode markdown-mode tuareg-mode))
  (add-to-list 'ac-modes mode))
  
(define-key ac-completing-map "\t" 'ac-complete)

(add-to-list 'load-path (get-plugin-real-path "emacs-git-gutter"))
(require 'git-gutter)
(global-git-gutter-mode t)
(setq git-gutter:window-width 2)
(setq git-gutter:lighter " G-+")
(setq git-gutter:modified-sign "~ ")
(setq git-gutter:added-sign "+ ")
(setq git-gutter:deleted-sign "- ")
(setq git-gutter:unchanged-sign "  ")
(set-face-foreground 'git-gutter:modified "#4c83ff")
(set-face-foreground 'git-gutter:deleted "gray10")
(set-face-foreground 'git-gutter:added "#61CE3C")
(set-face-background 'git-gutter:modified "gray5")
(set-face-background 'git-gutter:deleted "gray5")
(set-face-background 'git-gutter:added "gray5")
(set-face-background 'git-gutter:unchanged "gray5")

(set-face-background font-lock-warning-face "gray5")

(add-to-list 'load-path (get-plugin-real-path "smex"))
(require 'smex) ; Not needed if you use package.el
(smex-initialize) ; Can be omitted. This might cause a (minimal) delay
                  ; when Smex is auto-initialized on its first run.
(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
;; This is your old M-x.
(global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)

(add-to-list 'load-path (get-plugin-real-path "window-number"))
(require 'window-number)
(window-number-meta-mode 1)

;(add-to-list 'load-path (get-plugin-real-path "haskell-mode"))
;(require 'haskell-mode-autoloads)
;(add-to-list 'Info-default-directory-list (get-plugin-real-path "haskell-mode/"))

;;;;;;;;;;;;;;;;;;;;; some funcs

(defun inparen (s)
  (let ((lp (string-match "(" s))
		(rp (string-match ")" s)))
	(substring s (+ 1 lp) rp)))

(defun rdebug-values (vs)
  (let* ((rps (s-join ", " (-map (lambda (x) (format "%s=%%O" x)) vs)))
		 (vss (s-join ", " vs))
		 (result (format "debug_message(\"%s\", %s);" rps vss))
		 (-d (delete-region (line-beginning-position) (line-end-position)))
		 (-g (goto-char (line-beginning-position))))
	(insert result)))

;; void test_fun(int a, mixed * b, mixed *c...)
(defun rdebug ()
  (interactive)
  (let* ((line-content (buffer-substring-no-properties (line-beginning-position) (line-end-position)))
		 (line-content (s-replace "..." "" line-content))  ;; (mixed *abc...)
		 (line-content (s-replace "*" "" line-content))    ;; (int * a)
		 (c (inparen line-content))
		 (l (split-string c ","))
		 (vs (-map (lambda (x) (nth 1 (split-string x))) l)))
	(rdebug-values vs)))

;; b c d
(defun rdvalues ()
  (interactive)
  (let* ((line-content (buffer-substring-no-properties (line-beginning-position) (line-end-position)))
		 (vs (split-string line-content)))
	(rdebug-values vs)))

(defadvice save-buffers-kill-emacs (around no-query-kill-emacs activate)
  "Prevent annoying \"Active processes exist\" query when you quit Emacs."
  (flet ((process-list ())) ad-do-it))

;;;;;;;;;;;;;;;;;;;;; old configure options

; (add-to-list 'load-path (get-plugin-real-path "xcscope"))
; (require 'xcscope)

; (setq cscope-initial-directory "~/S/q1/logic")

;;;;;;;;;;;;;;;;;;;;

;; END
